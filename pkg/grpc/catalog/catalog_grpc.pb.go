// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: catalog.proto

package catalog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Catalog_GetManga_FullMethodName    = "/micromango.Catalog/GetManga"
	Catalog_GetMangas_FullMethodName   = "/micromango.Catalog/GetMangas"
	Catalog_AddManga_FullMethodName    = "/micromango.Catalog/AddManga"
	Catalog_UpdateManga_FullMethodName = "/micromango.Catalog/UpdateManga"
	Catalog_DeleteManga_FullMethodName = "/micromango.Catalog/DeleteManga"
	Catalog_GetList_FullMethodName     = "/micromango.Catalog/GetRateList"
	Catalog_SetAvgRate_FullMethodName  = "/micromango.Catalog/SetAvgRate"
	Catalog_SetLikes_FullMethodName    = "/micromango.Catalog/SetLikes"
	Catalog_LastUpdates_FullMethodName = "/micromango.Catalog/LastUpdates"
)

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogClient interface {
	GetManga(ctx context.Context, in *MangaRequest, opts ...grpc.CallOption) (*MangaResponse, error)
	GetMangas(ctx context.Context, in *GetMangasRequest, opts ...grpc.CallOption) (*MangasResponse, error)
	AddManga(ctx context.Context, in *AddMangaRequest, opts ...grpc.CallOption) (*MangaResponse, error)
	UpdateManga(ctx context.Context, in *UpdateMangaRequest, opts ...grpc.CallOption) (*MangaResponse, error)
	DeleteManga(ctx context.Context, in *DeleteMangaRequest, opts ...grpc.CallOption) (*Empty, error)
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
	SetAvgRate(ctx context.Context, in *SetAvgRateRateRequest, opts ...grpc.CallOption) (*Empty, error)
	SetLikes(ctx context.Context, in *SetLikesRequest, opts ...grpc.CallOption) (*Empty, error)
	LastUpdates(ctx context.Context, in *LastUpdatesRequest, opts ...grpc.CallOption) (*LastUpdatesResponse, error)
}

type catalogClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogClient(cc grpc.ClientConnInterface) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) GetManga(ctx context.Context, in *MangaRequest, opts ...grpc.CallOption) (*MangaResponse, error) {
	out := new(MangaResponse)
	err := c.cc.Invoke(ctx, Catalog_GetManga_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetMangas(ctx context.Context, in *GetMangasRequest, opts ...grpc.CallOption) (*MangasResponse, error) {
	out := new(MangasResponse)
	err := c.cc.Invoke(ctx, Catalog_GetMangas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) AddManga(ctx context.Context, in *AddMangaRequest, opts ...grpc.CallOption) (*MangaResponse, error) {
	out := new(MangaResponse)
	err := c.cc.Invoke(ctx, Catalog_AddManga_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UpdateManga(ctx context.Context, in *UpdateMangaRequest, opts ...grpc.CallOption) (*MangaResponse, error) {
	out := new(MangaResponse)
	err := c.cc.Invoke(ctx, Catalog_UpdateManga_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) DeleteManga(ctx context.Context, in *DeleteMangaRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Catalog_DeleteManga_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, Catalog_GetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) SetAvgRate(ctx context.Context, in *SetAvgRateRateRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Catalog_SetAvgRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) SetLikes(ctx context.Context, in *SetLikesRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Catalog_SetLikes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) LastUpdates(ctx context.Context, in *LastUpdatesRequest, opts ...grpc.CallOption) (*LastUpdatesResponse, error) {
	out := new(LastUpdatesResponse)
	err := c.cc.Invoke(ctx, Catalog_LastUpdates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServer is the server API for Catalog service.
// All implementations must embed UnimplementedCatalogServer
// for forward compatibility
type CatalogServer interface {
	GetManga(context.Context, *MangaRequest) (*MangaResponse, error)
	GetMangas(context.Context, *GetMangasRequest) (*MangasResponse, error)
	AddManga(context.Context, *AddMangaRequest) (*MangaResponse, error)
	UpdateManga(context.Context, *UpdateMangaRequest) (*MangaResponse, error)
	DeleteManga(context.Context, *DeleteMangaRequest) (*Empty, error)
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	SetAvgRate(context.Context, *SetAvgRateRateRequest) (*Empty, error)
	SetLikes(context.Context, *SetLikesRequest) (*Empty, error)
	LastUpdates(context.Context, *LastUpdatesRequest) (*LastUpdatesResponse, error)
	mustEmbedUnimplementedCatalogServer()
}

// UnimplementedCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServer struct {
}

func (UnimplementedCatalogServer) GetManga(context.Context, *MangaRequest) (*MangaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManga not implemented")
}
func (UnimplementedCatalogServer) GetMangas(context.Context, *GetMangasRequest) (*MangasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMangas not implemented")
}
func (UnimplementedCatalogServer) AddManga(context.Context, *AddMangaRequest) (*MangaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddManga not implemented")
}
func (UnimplementedCatalogServer) UpdateManga(context.Context, *UpdateMangaRequest) (*MangaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateManga not implemented")
}
func (UnimplementedCatalogServer) DeleteManga(context.Context, *DeleteMangaRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteManga not implemented")
}
func (UnimplementedCatalogServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRateList not implemented")
}
func (UnimplementedCatalogServer) SetAvgRate(context.Context, *SetAvgRateRateRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAvgRate not implemented")
}
func (UnimplementedCatalogServer) SetLikes(context.Context, *SetLikesRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLikes not implemented")
}
func (UnimplementedCatalogServer) LastUpdates(context.Context, *LastUpdatesRequest) (*LastUpdatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastUpdates not implemented")
}
func (UnimplementedCatalogServer) mustEmbedUnimplementedCatalogServer() {}

// UnsafeCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServer will
// result in compilation errors.
type UnsafeCatalogServer interface {
	mustEmbedUnimplementedCatalogServer()
}

func RegisterCatalogServer(s grpc.ServiceRegistrar, srv CatalogServer) {
	s.RegisterService(&Catalog_ServiceDesc, srv)
}

func _Catalog_GetManga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MangaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetManga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetManga_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetManga(ctx, req.(*MangaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetMangas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMangasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetMangas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetMangas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetMangas(ctx, req.(*GetMangasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_AddManga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMangaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).AddManga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_AddManga_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).AddManga(ctx, req.(*AddMangaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UpdateManga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMangaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UpdateManga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_UpdateManga_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UpdateManga(ctx, req.(*UpdateMangaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_DeleteManga_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMangaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).DeleteManga(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_DeleteManga_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).DeleteManga(ctx, req.(*DeleteMangaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_GetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_SetAvgRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAvgRateRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).SetAvgRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_SetAvgRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).SetAvgRate(ctx, req.(*SetAvgRateRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_SetLikes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLikesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).SetLikes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_SetLikes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).SetLikes(ctx, req.(*SetLikesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_LastUpdates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastUpdatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).LastUpdates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Catalog_LastUpdates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).LastUpdates(ctx, req.(*LastUpdatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Catalog_ServiceDesc is the grpc.ServiceDesc for Catalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "micromango.Catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManga",
			Handler:    _Catalog_GetManga_Handler,
		},
		{
			MethodName: "GetMangas",
			Handler:    _Catalog_GetMangas_Handler,
		},
		{
			MethodName: "AddManga",
			Handler:    _Catalog_AddManga_Handler,
		},
		{
			MethodName: "UpdateManga",
			Handler:    _Catalog_UpdateManga_Handler,
		},
		{
			MethodName: "DeleteManga",
			Handler:    _Catalog_DeleteManga_Handler,
		},
		{
			MethodName: "GetRateList",
			Handler:    _Catalog_GetList_Handler,
		},
		{
			MethodName: "SetAvgRate",
			Handler:    _Catalog_SetAvgRate_Handler,
		},
		{
			MethodName: "SetLikes",
			Handler:    _Catalog_SetLikes_Handler,
		},
		{
			MethodName: "LastUpdates",
			Handler:    _Catalog_LastUpdates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog.proto",
}
